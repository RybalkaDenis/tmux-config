# Using default Ctrl+s prefix

# Smart pane switching with awareness of Vim splits (vim-tmux-navigator)
# Supports both Ctrl-h/j/k/l and Ctrl-w h/j/k/l patterns
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

# Direct Ctrl-h/j/k/l navigation
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# Vim-style Ctrl-w navigation (Ctrl-w h/j/k/l)
bind-key -n 'C-w' switch-client -T VIMWINDOW
bind-key -T VIMWINDOW 'h' if-shell "$is_vim" 'send-keys C-w h' 'select-pane -L'
bind-key -T VIMWINDOW 'j' if-shell "$is_vim" 'send-keys C-w j' 'select-pane -D'
bind-key -T VIMWINDOW 'k' if-shell "$is_vim" 'send-keys C-w k' 'select-pane -U'
bind-key -T VIMWINDOW 'l' if-shell "$is_vim" 'send-keys C-w l' 'select-pane -R'

# Ctrl-w with arrow keys
bind-key -T VIMWINDOW 'Left' if-shell "$is_vim" 'send-keys C-w Left' 'select-pane -L'
bind-key -T VIMWINDOW 'Down' if-shell "$is_vim" 'send-keys C-w Down' 'select-pane -D'
bind-key -T VIMWINDOW 'Up' if-shell "$is_vim" 'send-keys C-w Up' 'select-pane -U'
bind-key -T VIMWINDOW 'Right' if-shell "$is_vim" 'send-keys C-w Right' 'select-pane -R'

# Allow other Ctrl-w commands to pass through to vim
bind-key -T VIMWINDOW 'v' if-shell "$is_vim" 'send-keys C-w v' ''
bind-key -T VIMWINDOW 's' if-shell "$is_vim" 'send-keys C-w s' ''
bind-key -T VIMWINDOW 'q' if-shell "$is_vim" 'send-keys C-w q' ''
bind-key -T VIMWINDOW 'w' if-shell "$is_vim" 'send-keys C-w w' ''

# Fallback: Arrow key navigation with prefix (Ctrl+s)
bind Left select-pane -L
bind Down select-pane -D
bind Up select-pane -U
bind Right select-pane -R

# Prefix-based vim-style navigation as alternative (Ctrl+s h/j/k/l)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Vim-style pane resizing
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# Vim-style copy mode
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# Quick pane splitting (like vim splits)
bind v split-window -h  # vertical split
bind s split-window -v  # horizontal split

# Reload config file
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Enable mouse support
set -g mouse on

set -g prefix C-s

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# macOS clipboard integration (works on modern macOS without reattach-to-user-namespace)
set-option -g default-command "exec $SHELL"
set-option -g status-position top

# Copy mode integration with system clipboard
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"

# Allow terminal to pass through Cmd+C and Cmd+V to applications
set-option -g set-clipboard on

set -g default-terminal "tmux-256color"

# Enable native macOS copy/paste with Cmd+C and Cmd+V
# This allows applications to handle Cmd+C/Cmd+V directly
unbind -T root C-c
unbind -T root C-v

# Better mouse copy - automatically copy selection to clipboard
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Easy access to system clipboard for Ctrl+Shift+C and Ctrl+Shift+V
bind-key -n C-S-c run "tmux save-buffer - | pbcopy"
bind-key -n C-S-v run "pbpaste | tmux load-buffer - && tmux paste-buffer"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'catppuccin/tmux#v2.1.3'
set -g @plugin 'christoomey/vim-tmux-navigator'

# Configure the catppuccin plugin
set -g @catppuccin_flavor "mocha"
set -g @catppuccin_window_status_style "rounded"

run '~/.tmux/plugins/tpm/tpm'
